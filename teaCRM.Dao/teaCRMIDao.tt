<#@ template debug="True" hostspecific="True" language="C#" #>
<#@ include file="$(SolutionDir)\teaCRM.Entity\MultipleOutputHelper.ttinclude" #>
<#@ assembly Name="$(SolutionDir)\teaCRM.Entity\bin\Debug\NLite.dll" #>
<#@ assembly Name="$(SolutionDir)\teaCRM.Entity\bin\Debug\ELinq.dll" #>
<#@ assembly Name="System.Data" #>
<#@ assembly Name="$(SolutionDir)\teaCRM.Entity\bin\Debug\MySql.Data.dll" #>
<#@ import Namespace="NLite.Data" #>
<#@ import Namespace="NLite.Data.CodeGeneration" #>
<#@ output extension=".cs" #>
<#
	var @contextNamespace = "teaCRM.DBContext";
	var @ModelNamespace = "teaCRM.Model";
	var @DaoNamespace = "teaCRM.Dao";
	var connectionStringName = "teaCRMSqlServer";
	var dbType=GetAppSettings("databaseType");
	switch(dbType){
		    case "SqlServer":
	        connectionStringName = "teaCRMSqlServer";
			break;
			case "MySql":
				 connectionStringName = "teaCRMMySql";
			break;
			default:
			 connectionStringName = "teaCRMSqlServer";
			break;
    }
	//var dbContextName = Host.TemplateFile.Split('\\')[Host.TemplateFile.Split('\\').Length - 1].TrimEnd('.', 't');
	var dbContextName ="teaCRMDBContext";
	var connectionStringSetting = GetConnectionStringSettings(connectionStringName);
	var connectionString = connectionStringSetting.ConnectionString;
	var dbProviderName = connectionStringSetting.ProviderName;
	var dbConfiguration = DbConfiguration.Configure(connectionString, dbProviderName);
	var databaseSchema = dbConfiguration.Schema;
	var manager = Manager.Create(Host, GenerationEnvironment);
	//manager.StartHeader();
#>


<#foreach (var tb in databaseSchema.Tables){#>
<#
 //开始IDao===================================================================================
var daoFilename= "I"+NamingConversion.Default.ClassName( tb.TableName)+ "Dao";
var daoModelName=NamingConversion.Default.ClassName( tb.TableName);
var daoListName=NamingConversion.Default.QueryableName( tb.TableName);
manager.StartNewFile(daoFilename+ ".cs");
#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using NLite.Data;
using teaCRM.DBContext;
using teaCRM.Entity;

namespace <#= @DaoNamespace #>
{
public  interface <#=daoFilename#>
    {
	    /// <summary>
        /// 获取所有的数据
	    /// </summary>
	    /// <returns>返回所有数据列表</returns>
         List<<#=daoModelName#>> GetList() ;
       
		/// <summary>
        /// 获取指定的单个实体
        /// 如果不存在则返回null
        /// 如果存在多个则抛异常
        /// </summary>
        /// <param name="predicate">Lamda表达式</param>
        /// <returns>Entity</returns>
         <#=daoModelName#> GetEntity(Expression<Func<<#=daoModelName#>, bool>> predicate) ;
       
		  /// <summary>
        /// 添加实体
        /// </summary>
        /// <param name="entity">实体对象</param>
         bool InsertEntity(<#=daoModelName#> entity);
       
       /// <summary>
        /// 删除实体
        /// </summary>
         /// <param name="predicate">Lamda表达式</param>
         bool DeleteEntity(Expression<Func<<#=daoModelName#> , bool>> predicate) ;
      
		
		/// <summary>
        /// 批量删除
        /// </summary>
        /// <param name="list">实体集合</param>
         bool DeletesEntity(List<<#=daoModelName#>> list) ;
       

         /// <summary>
        /// 修改实体
        /// </summary>
        /// <param name="entity">实体对象</param>
         bool UpadateEntity(<#=daoModelName#> entity);
    


        /// <summary>
        /// 是否存在该记录
        /// </summary>
        /// <returns></returns>
          bool ExistsEntity(Expression<Func<<#=daoModelName#> , bool>> predicate);
	 
		 //查询分页
      List<<#=daoModelName#>> GetListByPage(int pageIndex, int pageSize, Expression<Func<<#=daoModelName#> , bool>> predicate);
	 
	 
	  //以下是原生Sql方法==============================================================
	  //===========================================================================
	  /// <summary>
        /// 用SQL语句查询
        /// </summary>
        /// <param name="sql">sql语句</param>
        /// <param name="namedParameters">sql参数</param>
        /// <returns>集合</returns>
         IEnumerable<<#=daoModelName#>> GetListBySql(string sql, dynamic namedParameters);
       	
		/// <summary>
	     /// 执行Sql
	     /// </summary>
	     /// <param name="sql">Sql语句</param>
	     /// <param name="namedParameters">查询字符串</param>
	     /// <returns></returns>
		 bool ExecuteSql(string sql, dynamic namedParameters = null);

	   }
	   }
<#
  }
#>

<#
 manager.EndBlock();
 //结束IDao===================================================================================
#>

<#

foreach (var tb in databaseSchema.Views){
	var daoFilename= "I"+NamingConversion.Default.ClassName( tb.TableName)+ "Dao";
var daoModelName=NamingConversion.Default.ClassName( tb.TableName);
var daoListName=NamingConversion.Default.QueryableName( tb.TableName);
	 manager.StartNewFile(NamingConversion.Default.ClassName(tb.TableName) + ".cs");
	 //开始视图
	 #>


using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using NLite.Data;
using teaCRM.DBContext;
using teaCRM.Entity;

namespace <#= @DaoNamespace #>
{
public  interface <#=daoFilename#>
    {
	    /// <summary>
        /// 获取所有的数据
	    /// </summary>
	    /// <returns>返回所有数据列表</returns>
         List<<#=daoModelName#>> GetList() ;
       
		/// <summary>
        /// 获取指定的单个实体
        /// 如果不存在则返回null
        /// 如果存在多个则抛异常
        /// </summary>
        /// <param name="predicate">Lamda表达式</param>
        /// <returns>Entity</returns>
         <#=daoModelName#> GetEntity(Expression<Func<<#=daoModelName#>, bool>> predicate) ;
       
		
		
        /// <summary>
        /// 是否存在该记录
        /// </summary>
        /// <returns></returns>
          bool ExistsEntity(Expression<Func<<#=daoModelName#> , bool>> predicate);
	 
		 //查询分页
      List<<#=daoModelName#>> GetListByPage(int pageIndex, int pageSize, Expression<Func<<#=daoModelName#> , bool>> predicate);
	 
	 
	  //以下是原生Sql方法==============================================================
	  //===========================================================================
	  /// <summary>
        /// 用SQL语句查询
        /// </summary>
        /// <param name="sql">sql语句</param>
        /// <param name="namedParameters">sql参数</param>
        /// <returns>集合</returns>
         IEnumerable<<#=daoModelName#>> GetListBySql(string sql, dynamic namedParameters);

	   }
	   }
<# 
	} 
 manager.EndBlock();
#>



<#
 //执行===================================================================================
 manager.Process(true);
#>