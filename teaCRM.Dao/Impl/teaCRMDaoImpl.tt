<#@ template debug="True" hostspecific="True" language="C#" #>
<#@ include file="$(SolutionDir)\teaCRM.Entity\MultipleOutputHelper.ttinclude" #>
<#@ assembly Name="$(SolutionDir)\teaCRM.Entity\bin\Debug\NLite.dll" #>
<#@ assembly Name="$(SolutionDir)\teaCRM.Entity\bin\Debug\ELinq.dll" #>
<#@ assembly Name="System.Data" #>
<#@ assembly Name="$(SolutionDir)\teaCRM.Entity\bin\Debug\MySql.Data.dll" #>
<#@ import Namespace="NLite.Data" #>
<#@ import Namespace="NLite.Data.CodeGeneration" #>
<#@ output extension=".cs" #>
<#
	var @contextNamespace = "teaCRM.DBContext";
	var @ModelNamespace = "teaCRM.Model";
	var @DaoNamespace = " teaCRM.Dao.Impl";
	var @Date=System.DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss");
	
	var connectionStringName = "teaCRMSqlServer";
	var dbType=GetAppSettings("databaseType");
	switch(dbType){
		    case "SqlServer":
	        connectionStringName = "teaCRMSqlServer";
			break;
			case "MySql":
				 connectionStringName = "teaCRMMySql";
			break;
			default:
			 connectionStringName = "teaCRMSqlServer";
			break;
    }
	//var dbContextName = Host.TemplateFile.Split('\\')[Host.TemplateFile.Split('\\').Length - 1].TrimEnd('.', 't');
	var dbContextName ="teaCRMDBContext";
	var connectionStringSetting = GetConnectionStringSettings(connectionStringName);
	var connectionString = connectionStringSetting.ConnectionString;
	var dbProviderName = connectionStringSetting.ProviderName;
	var dbConfiguration = DbConfiguration.Configure(connectionString, dbProviderName);
	var databaseSchema = dbConfiguration.Schema;
	var manager = Manager.Create(Host, GenerationEnvironment);
	//manager.StartHeader();
#>


<#foreach (var tb in databaseSchema.Tables){#>
<#
 //开始Dao===================================================================================
var daoFilename= NamingConversion.Default.ClassName( tb.TableName)+ "DaoImpl";
var daoModelName=NamingConversion.Default.ClassName( tb.TableName);
var daoListName=NamingConversion.Default.QueryableName( tb.TableName);
manager.StartNewFile(daoFilename+ ".cs");
#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using NLite.Data;
using teaCRM.DBContext;
using teaCRM.Entity;

namespace <#= @DaoNamespace #>
{

    /// <summary>
    /// 自动生成的实现I<#=daoModelName#>Dao接口的Dao类。 <#=@Date#> By 唐有炜
    /// </summary>
 public class <#=daoFilename#>:I<#=daoModelName#>Dao
    {
	    /// <summary>
        /// 获取所有的数据
	    /// </summary>
	    /// <returns>返回所有数据列表</returns>
        public List<<#=daoModelName#>> GetList() 
        {
          using (<#=dbContextName#> db=new <#=dbContextName#>())
            {
             var models= db.<#=daoListName#>.ToList();
			 return models;
            }
        }

		/// <summary>
        /// 获取指定的单个实体
        /// 如果不存在则返回null
        /// 如果存在多个则抛异常
        /// </summary>
        /// <param name="predicate">Lamda表达式</param>
        /// <returns>Entity</returns>
        public <#=daoModelName#> GetEntity(Expression<Func<<#=daoModelName#>, bool>> predicate) 
        {
            using (<#=dbContextName#> db=new <#=dbContextName#>())
            {
                var model =db.<#=daoListName#>.Where<<#=daoModelName#>>(predicate).SingleOrDefault();
                return model;
		    }
        }

		
		  /// <summary>
        /// 添加实体
        /// </summary>
        /// <param name="entity">实体对象</param>
        public bool InsertEntity(<#=daoModelName#> entity)
        {
            using (<#=dbContextName#> db=new <#=dbContextName#>())
            {
              int rows=  db.<#=daoListName#>.Insert(entity);
				 if (rows > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }
       /// <summary>
        /// 删除实体
        /// </summary>
         /// <param name="predicate">Lamda表达式</param>
        public bool DeleteEntity(Expression<Func<<#=daoModelName#> , bool>> predicate) 
        {
            using (<#=dbContextName#> db=new <#=dbContextName#>())
            {
                <#=daoModelName#>  entity = db.<#=daoListName#>.Where(predicate).First();
                int rows=db.<#=daoListName#>.Delete(entity);
				 if (rows > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }
		
		/// <summary>
        /// 批量删除
        /// </summary>
        /// <param name="list">实体集合</param>
        public bool DeletesEntity(List<<#=daoModelName#>> list) 
        {
            using (<#=dbContextName#> db=new <#=dbContextName#>())
            {
                //var tran = db.Connection.BeginTransaction();
                try
                {
                    foreach (var item in list)
                    {
                        db.<#=daoListName#>.Delete(item);
                    }
                    //tran.Commit();
					return true;
                }
                catch (Exception ex)
                {
                    //tran.Rollback();
					return false;
                    throw new Exception(ex.Message);
                }
            }
        }

         /// <summary>
        /// 修改实体
        /// </summary>
        /// <param name="entity">实体对象</param>
        public bool UpadateEntity(<#=daoModelName#> entity)
        {
            using (<#=dbContextName#> db=new <#=dbContextName#>())
            {
               int rows= db.<#=daoListName#>.Update(entity);
			   if (rows > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }


        /// <summary>
        /// 是否存在该记录
        /// </summary>
        /// <returns></returns>
       public   bool ExistsEntity(Expression<Func<<#=daoModelName#> , bool>> predicate)
	   {
            using (<#=dbContextName#> db=new <#=dbContextName#>())
            {
               bool status= db.<#=daoListName#>.Any(predicate);
               return status;
            }
        }

		 //查询分页
    public  List<<#=daoModelName#>> GetListByPage(int pageIndex, int pageSize, Expression<Func<<#=daoModelName#> , bool>> predicate)
	  {
	   using (<#=dbContextName#> db=new <#=dbContextName#>())
            {
             var models= db.<#=daoListName#>.ToList();
			 return models;
            }
	  }


	  

	  //以下是原生Sql方法==============================================================
	  //===========================================================================
	   /// <summary>
        /// 用SQL语句查询
        /// </summary>
        /// <param name="sql">sql语句</param>
        /// <param name="namedParameters">sql参数</param>
        /// <returns>集合</returns>
        public IEnumerable<<#=daoModelName#>> GetListBySql(string sql, dynamic namedParameters)
        {
          using (<#=dbContextName#> db=new <#=dbContextName#>())
            {
               return db.DbHelper.ExecuteDataTable(sql,namedParameters).ToList<<#=daoModelName#>>();
            }
          
        }
		
		/// <summary>
	     /// 执行Sql
	     /// </summary>
	     /// <param name="sql">Sql语句</param>
	     /// <param name="namedParameters">查询字符串</param>
	     /// <returns></returns>
		public bool ExecuteSql(string sql, dynamic namedParameters = null)
		{
	         using (teaCRMDBContext db = new teaCRMDBContext())
	         {
	             var rows = db.DbHelper.ExecuteNonQuery(sql, namedParameters);
	             if (rows > 0)
	             {
	                 return true;
	             }
	             else
	             {
	                 return false;
	             }
	         }
		}




	   }
	   }
<#
  }
#>

<#
 manager.EndBlock();
 //结束Dao===================================================================================
#>




<#foreach (var tb in databaseSchema.Views){#>
<#
 //开始ViewDao===================================================================================
var daoFilename= NamingConversion.Default.ClassName( tb.TableName)+ "DaoImpl";
var daoModelName=NamingConversion.Default.ClassName( tb.TableName);
var daoListName=NamingConversion.Default.QueryableName( tb.TableName);
manager.StartNewFile(daoFilename+ ".cs");
#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using NLite.Data;
using teaCRM.DBContext;
using teaCRM.Entity;

namespace <#= @DaoNamespace #>
{

    /// <summary>
    /// 自动生成的实现I<#=daoModelName#>Dao接口的Dao类。 <#=@Date#> By 唐有炜
    /// </summary>
 public class <#=daoFilename#>:I<#=daoModelName#>Dao
    {
	    /// <summary>
        /// 获取所有的数据
	    /// </summary>
	    /// <returns>返回所有数据列表</returns>
        public List<<#=daoModelName#>> GetList() 
        {
          using (<#=dbContextName#> db=new <#=dbContextName#>())
            {
             var models= db.<#=daoListName#>.ToList();
			 return models;
            }
        }

		/// <summary>
        /// 获取指定的单个实体
        /// 如果不存在则返回null
        /// 如果存在多个则抛异常
        /// </summary>
        /// <param name="predicate">Lamda表达式</param>
        /// <returns>Entity</returns>
        public <#=daoModelName#> GetEntity(Expression<Func<<#=daoModelName#>, bool>> predicate) 
        {
            using (<#=dbContextName#> db=new <#=dbContextName#>())
            {
                var model =db.<#=daoListName#>.Where<<#=daoModelName#>>(predicate).SingleOrDefault();
                return model;
		    }
        }

		
        /// <summary>
        /// 是否存在该记录
        /// </summary>
        /// <returns></returns>
       public   bool ExistsEntity(Expression<Func<<#=daoModelName#> , bool>> predicate)
	   {
            using (<#=dbContextName#> db=new <#=dbContextName#>())
            {
               bool status= db.<#=daoListName#>.Any(predicate);
               return status;
            }
        }

		 //查询分页
    public  List<<#=daoModelName#>> GetListByPage(int pageIndex, int pageSize, Expression<Func<<#=daoModelName#> , bool>> predicate)
	  {
	   using (<#=dbContextName#> db=new <#=dbContextName#>())
            {
             var models= db.<#=daoListName#>.ToList();
			 return models;
            }
	  }


	  
	  //以下是原生Sql方法==============================================================
	  //===========================================================================
	   /// <summary>
        /// 用SQL语句查询
        /// </summary>
        /// <param name="sql">sql语句</param>
        /// <param name="namedParameters">sql参数</param>
        /// <returns>集合</returns>
        public IEnumerable<<#=daoModelName#>> GetListBySql(string sql, dynamic namedParameters)
        {
          using (<#=dbContextName#> db=new <#=dbContextName#>())
            {
               return db.DbHelper.ExecuteDataTable(sql,namedParameters).ToList<<#=daoModelName#>>();
            }
          
        }
		
		

	   }
	   }
<#
  }
#>

<#
 manager.EndBlock();
 //结束ViewDao===================================================================================
#>


<#
 //执行===================================================================================
 manager.Process(true);
#>