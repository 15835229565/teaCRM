//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;

namespace teaCRM.Model
{
    public partial class T_fun_myapp
    {
        #region Primitive Properties
    	[Required]
    	public virtual int id
        {
            get;
            set;
        }
    	[Required]
    	public virtual int parent_id
        {
            get;
            set;
        }
    	[Required]
        [MaxLength(50)]
    	public virtual string myapp_name
        {
            get;
            set;
        }
    	//[Required]
    	public virtual byte[] myapp_link
        {
            get;
            set;
        }
    	//[Required]
        [MaxLength(255)]
    	public virtual string myapp_note
        {
            get;
            set;
        }
    	//[Required]
        [MaxLength(100)]
    	public virtual string myapp_action
        {
            get;
            set;
        }
    	[Required]
        [MaxLength(200)]
    	public virtual string myapp_date
        {
            get;
            set;
        }
    	[Required]
    	public virtual int myapp_is_nav
        {
            get;
            set;
        }
    	[Required]
    	public virtual int myapp_is_sys
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<T_fun_expand> T_fun_expand
        {
            get
            {
                if (_t_fun_expand == null)
                {
                    var newCollection = new FixupCollection<T_fun_expand>();
                    newCollection.CollectionChanged += FixupT_fun_expand;
                    _t_fun_expand = newCollection;
                }
                return _t_fun_expand;
            }
            set
            {
                if (!ReferenceEquals(_t_fun_expand, value))
                {
                    var previousValue = _t_fun_expand as FixupCollection<T_fun_expand>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupT_fun_expand;
                    }
                    _t_fun_expand = value;
                    var newValue = value as FixupCollection<T_fun_expand>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupT_fun_expand;
                    }
                }
            }
        }
        private ICollection<T_fun_expand> _t_fun_expand;
    
        public virtual ICollection<T_fun_filters> T_fun_filters
        {
            get
            {
                if (_t_fun_filters == null)
                {
                    var newCollection = new FixupCollection<T_fun_filters>();
                    newCollection.CollectionChanged += FixupT_fun_filters;
                    _t_fun_filters = newCollection;
                }
                return _t_fun_filters;
            }
            set
            {
                if (!ReferenceEquals(_t_fun_filters, value))
                {
                    var previousValue = _t_fun_filters as FixupCollection<T_fun_filters>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupT_fun_filters;
                    }
                    _t_fun_filters = value;
                    var newValue = value as FixupCollection<T_fun_filters>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupT_fun_filters;
                    }
                }
            }
        }
        private ICollection<T_fun_filters> _t_fun_filters;
    
        public virtual ICollection<T_fun_operating> T_fun_operating
        {
            get
            {
                if (_t_fun_operating == null)
                {
                    var newCollection = new FixupCollection<T_fun_operating>();
                    newCollection.CollectionChanged += FixupT_fun_operating;
                    _t_fun_operating = newCollection;
                }
                return _t_fun_operating;
            }
            set
            {
                if (!ReferenceEquals(_t_fun_operating, value))
                {
                    var previousValue = _t_fun_operating as FixupCollection<T_fun_operating>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupT_fun_operating;
                    }
                    _t_fun_operating = value;
                    var newValue = value as FixupCollection<T_fun_operating>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupT_fun_operating;
                    }
                }
            }
        }
        private ICollection<T_fun_operating> _t_fun_operating;
    
        public virtual ICollection<T_fun_tags> T_fun_tags
        {
            get
            {
                if (_t_fun_tags == null)
                {
                    var newCollection = new FixupCollection<T_fun_tags>();
                    newCollection.CollectionChanged += FixupT_fun_tags;
                    _t_fun_tags = newCollection;
                }
                return _t_fun_tags;
            }
            set
            {
                if (!ReferenceEquals(_t_fun_tags, value))
                {
                    var previousValue = _t_fun_tags as FixupCollection<T_fun_tags>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupT_fun_tags;
                    }
                    _t_fun_tags = value;
                    var newValue = value as FixupCollection<T_fun_tags>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupT_fun_tags;
                    }
                }
            }
        }
        private ICollection<T_fun_tags> _t_fun_tags;

        #endregion
        #region Association Fixup
    
        private void FixupT_fun_expand(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (T_fun_expand item in e.NewItems)
                {
                    item.T_fun_myapp = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (T_fun_expand item in e.OldItems)
                {
                    if (ReferenceEquals(item.T_fun_myapp, this))
                    {
                        item.T_fun_myapp = null;
                    }
                }
            }
        }
    
        private void FixupT_fun_filters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (T_fun_filters item in e.NewItems)
                {
                    item.T_fun_myapp = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (T_fun_filters item in e.OldItems)
                {
                    if (ReferenceEquals(item.T_fun_myapp, this))
                    {
                        item.T_fun_myapp = null;
                    }
                }
            }
        }
    
        private void FixupT_fun_operating(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (T_fun_operating item in e.NewItems)
                {
                    item.T_fun_myapp = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (T_fun_operating item in e.OldItems)
                {
                    if (ReferenceEquals(item.T_fun_myapp, this))
                    {
                        item.T_fun_myapp = null;
                    }
                }
            }
        }
    
        private void FixupT_fun_tags(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (T_fun_tags item in e.NewItems)
                {
                    item.T_fun_myapp = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (T_fun_tags item in e.OldItems)
                {
                    if (ReferenceEquals(item.T_fun_myapp, this))
                    {
                        item.T_fun_myapp = null;
                    }
                }
            }
        }

        #endregion
    }
}
